"use strict";
/*Методы для массивов в JavaScript
Работа с push, unshift
Изучите теорию по следующим ссылкам:
push unshift
Метод push
Метод push добавляет неограниченное количество элементов в конец массива. 
При этом исходный массив изменяется, а результатом возвращается новая длина массива.
*********
Синтаксис
массив.push(элемент, элемент, элемент...)
*********
Пример 
Давайте в конец массива добавим еще два новых элемента:*/
let arr = ['a', 'b', 'c', 'd', 'e'];
arr.push('1', '2');
console.log(arr); //['a', 'b', 'c', 'd', 'e', '1', '2']
//Добавим в массив два новых элемента и выведем новую длину массива:
let arr = ['a', 'b', 'c', 'd', 'e'];
let length = arr.push('1', '2');
console.log(length); //7
//Применение Заполним массив числами от 1 до 9:
let arr = [];
for (let i = 1; i <= 9; i++) {
    arr.push(i)
}
console.log(arr); // [1, 2, 3, 4, 5, 6, 7, 8, 9]

/*Метод unshift
Метод unshift добавляет неограниченное количество новых элементов в начало массива.
При этом исходный массив изменяется, а результатом возвращается новая длина массива.
*********
Синтаксис
массив.unshift(элемент, элемент, элемент...);
*********
Пример
Давайте в начало массива добавим еще два новых элемента и выведем измененный 
массив:*/
let arr = ['a', 'b', 'c', 'd', 'e'];
arr.unshift('1', '2');
console.log(arr); //['1', '2', 'a', 'b', 'c', 'd', 'e']
//Давайте добавим два новых элемента и выведем новую длину массива:
let arr = ['a', 'b', 'c', 'd', 'e'];
let length = arr.unshift('1', '2');
console.log(length); //7

/*Задача 1
Дан следующий массив:
Добавьте ему в конец элементы 4, 5, 6.*/
let arr = [1, 2, 3];
arr.push(4, 5, 6);
console.log(arr); //[ 1, 2, 3, 4, 5, 6 ]

/*Задача 2 
Дан следующий массив:
[1, 2, 3]
Добавьте ему в начало элементы 4, 5, 6.*/
let arr = [1, 2, 3];
arr.unshift(4, 5, 6);
console.log(arr);

/*Работа с shift, pop
Изучите теорию по следующим ссылкам:
Метод shift
Метод shift удаляет первый элемент из массива. При этом исходный массив изменяется, 
а результатом метода возвращается удаленный элемент.
*********
Синтаксис
массив.shift();
*********
Пример 
Давайте удалим первый элемент из массива:*/
let arr = ['a', 'b', 'c', 'd', 'e'];
arr.shift();
console.log(arr); //['b', 'c', 'd', 'e']
//Давайте удалим первый элемент из массива и выведем его на экран:
let arr = ['a', 'b', 'c', 'd', 'e'];
let elem = arr.shift();
console.log(elem); //'a'
/*Применение
Пусть дан массив['1', '2', '3', '4', '5', '6'].Давайте сделаем из него строку 
'16-25-34'.Для решения задачи используем комбинацию методов shift, pop, push и join:*/
let arr = ['1', '2', '3', '4', '5', '6'];
let result = [];
while (arr.length > 0) { // массив уменьшается в цикле пока не достигнет нуля
    let first = arr.shift();
    let last = arr.pop();
    let str = first + last; // тут будет строка '16', потом '25', потом '34'
    result.push(str);
} // После цикла в result лежит массив ['16', '25', '34']. Сольем его в строку:
result = result.join('-');
console.log(result); //'16-25-34'

/*Метод pop
Метод pop удаляет последний элемент из массива. При этом исходный массив изменяется, 
а результатом метода возвращается удаленный элемент.
*********
Синтаксис
массив.pop()
*********
Пример 
Давайте удалим из массива последний элемент:*/
let arr = ['a', 'b', 'c', 'd', 'e'];
arr.pop();
console.log(arr); //['a', 'b', 'c', 'd']
//Давайте выведем последний элемент, который был удален из исходного массива:
let arr = ['a', 'b', 'c', 'd', 'e'];
let del = arr.pop();
console.log(del); //'e'
/*Применение
Пусть дан массив['1', '2', '3', '4', '5', '6'].Давайте сделаем из него строку 
'16-25-34'.Для решения задачи используем комбинацию методов pop, shift, push и join:*/
let arr = ['1', '2', '3', '4', '5', '6'];
let result = [];
while (arr.length > 0) { // массив уменьшается в цикле пока не достигнет нуля
    let first = arr.shift();
    let last = arr.pop();
    let str = first + last; // тут будет строка '16', потом '25', потом '34'
    result.push(str);
} // После цикла в result лежит массив ['16', '25', '34']. Сольем его в строку:
result = result.join('-');
console.log(result); //'16-25-34'

/*Задача 3
Дан следующий массив: [1, 2, 3]
Выведите на экран первый элемент этого массива.*/
let arr = [1, 2, 3];
let elem = arr.shift();
console.log(elem); //1

/*Задача 4
Дан следующий массив: [1, 2, 3]
Выведите на экран последний элемент этого массива.*/
let arr = [1, 2, 3];
let elem = arr.pop();
console.log(elem); //3

/*Работа с slice
Метод slice вырезает и возвращает указанную часть массива.
Первым параметром указывается номер элемента массива, с которого начинается вырезание, 
а вторым параметром - номер элемента, на котором закончится вырезание (при этом элемент
с этим номером не включится в вырезанную часть).
Второй параметр не является обязательным. Если его не указать - подмассив возьмется с 
указанного в первом параметре элемента до конца массива.
Второй параметр также может принимать отрицательные значения. В этом случае отсчет элемента,
на котором закончится обрезание, начинается с конца массива. Причем, последний элемент имеет
номер -1, предпоследний -2 и так далее.
К примеру, если написать slice(1, -1), то вырезанная часть возьмется с первого элемента 
включительно по последний не включая его. Если вам нужно включить и последний элемент - 
нужно просто не задавать второй параметр для slice, вот так: slice(1).
Метод не изменяет исходный массив.
Напоминаю, что в массиве нумерация элементов начинается с нуля.
*********
Синтаксис
массив.slice(откуда отрезать, [докуда отрезать])
*********
Пример 
Давайте вырежем из массива элементы с нулевого по второй не включительно (второй не вырежется):*/
let arr = ['a', 'b', 'c', 'd', 'e'];
let sub = arr.slice(0, 2);
console.log(sub); //['a', 'b']
/*Пример
Давайте вырежем с первого элемента до конца массива.Для этого второй параметр не задаем:*/
let arr = ['a', 'b', 'c', 'd', 'e'];
let sub = arr.slice(1);
console.log(sub); //['b', 'c', 'd', 'e']
/*Пример
Давайте вырежем элементы со второго по предпоследний(-1 указывает на последний элемент и он не 
включится в извлеченную часть):*/
let arr = ['a', 'b', 'c', 'd', 'e'];
let sub = arr.slice(1, -1);
console.log(sub); //['b', 'c', 'd']
/*Преимущество такого подхода в том, что вырезаться всегда будет часть массива, не включая 
последний элемент, независимо от размера массива.*/

/*Задача 5
Дан следующий массив:
[1, 2, 3, 4, 5]
Сделайте из этого массива следующий:
[1, 2, 3]*/
let arr = [1, 2, 3, 4, 5];
let sub = arr.slice(0, 3);
console.log(sub); //[1,2,3]

/*Задача 6
Дан следующий массив: [1, 2, 3, 4, 5]
Используя этот массив, запишите в новую переменную следующий массив:
[4, 5]*/
let arr = [1, 2, 3, 4, 5];
let sub = arr.slice(-2);
console.log(sub); //[4,5]

/*Работа с splice
Изучите теорию по следующим ссылкам: splice
Метод splice удаляет или добавляет элементы в массив. Можно только удалять элементы, 
только добавлять или делать и то и другое одновременно. Метод очень универсальный и сложный 
для понимания.
Метод изменяет сам массив и возвращает при этом массив удаленных элементов.
1. Первым параметром метод принимает номер элемента массива, который нужно удалить. 
2. Вторым параметром - сколько элементов массива следует удалить. 
Если его поставить в 0 - то элементы удалены не будут (только добавлены новые).
Дальше через запятую идут элементы, которые нужно добавить в массив (являются 
необязательными параметрами). Эти элементы добавятся вместо удаленных элементов массива.
Если удаления не было (когда второй параметр 0) - элементы вставятся в массив начиная с той 
позиции, которая указана первым параметром метода.
Первый параметр может иметь отрицательное значение. В этом случае отсчет позиции начнется не 
с начала массива, а с конца. Причем, последний элемент имеет номер -1, предпоследний -2 и так далее.
*********
Синтаксис
массив.splice(откуда удаляем, сколько элементов удаляем, [вставить элемент], [вставить элемент]...);
*********
Пример 
Давайте удалим элементы с первого, 3 штуки (это 'b', 'c' и 'd'):*/
let arr = ['a', 'b', 'c', 'd', 'e'];
arr.splice(1, 3);
console.log(arr); //['a', 'e']

let arr = ['a', 'b', 'c', 'd', 'e'];
console.log(arr.splice(1, 3)); //[ 'b', 'c', 'd' ]

//Давайте выведем массив удаленных элементов:
let arr = ['a', 'b', 'c', 'd', 'e'];
let del = arr.splice(1, 3);
console.log(del); //['b', 'c', 'd']

/*Давайте сначала удалим элемент с номером 2, а потом вместо него вставим еще 3 новых
элемента('1', '2' и '3'):*/
let arr = ['a', 'b', 'c', 'd', 'e'];
arr.splice(2, 1, '1', '2', '3');
console.log(arr); //['a', 'b', '1', '2', '3', 'd', 'e']
/*Пример
Давайте теперь ничего не будем удалять, но на позицию 2(это значит перед элементом с 
номером 2), вставим еще 3 новых элемента('1', '2' и '3'):*/
let arr = ['a', 'b', 'c', 'd', 'e'];
arr.splice(2, 0, '1', '2', '3');
console.log(arr); // ['a', 'b', '1', '2', '3', 'c', 'd', 'e']
/*Пример.Отрицательное значение
Давайте удалим предпоследний элемент 'd' (его номер - 2):*/
let arr = ['a', 'b', 'c', 'd', 'e'];
arr.splice(-2, 1);
console.log(arr); //['a', 'b', 'c', 'e']

/*Задача 7 
Дан следующий массив: [1, 2, 3, 4, 5]
С помощью метода splice преобразуйте массив в следующий:[1, 4, 5]*/
let arr = [1, 2, 3, 4, 5];
arr.splice(1, 2);
console.log(arr); //[1,4,5]

/*Задача 8
Дан следующий массив:[1, 2, 3, 4, 5]
С помощью метода splice сделайте из него массив: [1, 2, 3, 'a', 'b', 'c', 4, 5]*/
let arr = [1, 2, 3, 4, 5];
arr.splice(3, 0, 'a', 'b', 'c');
console.log(arr); //[1, 2, 3, 'a','b', 'c', 4, 5]

/*Задача 9 
Дан следующий массив: [1, 2, 3, 4, 5]
С помощью метода splice сделайте из него массив: [1, 'a', 'b', 2, 3, 4, 'c', 5, 'e']*/
let arr = [1, 2, 3, 4, 5];
arr.splice(1, 0, 'a', 'b');
arr.splice(6, 0, 'c');
arr.splice(8, 0, 'e');
console.log(arr);

/*Работа с indexOf
Изучите теорию по следующим ссылкам: indexOf
Array.prototype.indexOf()
Сводка
Метод indexOf() возвращает первый индекс, по которому данный элемент может быть найден в 
массиве или -1, если такого индекса нет.
Описание
Метод indexOf() сравнивает искомый элемент searchElement с элементами в массиве, используя
строгое сравнение (en-US) (тот же метод используется оператором ===, тройное равно).
*********
Синтаксис
arr.indexOf(searchElement[, fromIndex = 0])
*********
Параметры
searchElement - Искомый элемент в массиве.
fromIndex - Индекс, с которого начинать поиск. 
Если индекс больше или равен длине массива, возвращается -1, что означает, что массив даже 
не просматривается. Если индекс является отрицательным числом, он трактуется как смещение 
с конца массива. Обратите внимание: если индекс отрицателен, массив всё равно просматривается
от начала к концу. Если рассчитанный индекс оказывается меньше 0, поиск ведётся по всему массиву. 
Значение по умолчанию равно 0, что означает, что просматривается весь массив.
Примеры
Пример: использование indexOf()
В следующем примере indexOf() используется для поиска значений в массиве.*/
// var array = [2, 5, 9];
// array.indexOf(2); // 0
// array.indexOf(7); // -1
// array.indexOf(9, 2 // 2
// array.indexOf(2, -1); // -1
// array.indexOf(2, -3); // 0
/*Пример: нахождение всех вхождений элемента В следующем примере indexOf() используется для 
поиска всех индексов элемента в указанном массиве, которые с помощью push() добавляются в 
другой массив.*/
var indices = [];
var array = ['a', 'b', 'a', 'c', 'a', 'd'];
var element = 'a';
var idx = array.indexOf(element);
while (idx != -1) {
    indices.push(idx);
    idx = array.indexOf(element, idx + 1);
}
console.log(indices); // [0, 2, 4]
/*Полифил Метод indexOf() был добавлен к стандарту ECMA - 262 в 5 - м издании; поэтому он может
отсутствовать в других реализациях стандарта.Вы можете работать с ним, добавив следующий код в 
начало ваших скриптов, он позволяет использовать indexOf() в реализациях, которые не поддерживают
этот метод. Этот алгоритм является точно тем, что описан в ECMA - 262 5 - го издания; он 
предполагает, что TypeError и Math.abs() имеют свои первоначальные значения.
Шаги алгоритма ECMA-262, 5-е издание, 15.4.4.14
Ссылка (en): http://es5.github.io/#x15.4.4.14
Ссылка (ru): http://es5.javascript.ru/x15.4.html#x15.4.4.14*/
if (!Array.prototype.indexOf) {
    array.prototype.indexOf = function(searchElement, fromIndex) {
        var k;
        // 1. Положим O равным результату вызова ToObject с передачей ему
        //    значения this в качестве аргумента.
        if (this == null) {
            throw new TypeError('"this" is null or not defined');
        }

        var O = Object(this);

        // 2. Положим lenValue равным результату вызова внутреннего метода Get
        //    объекта O с аргументом "length".
        // 3. Положим len равным ToUint32(lenValue).
        var len = O.length >>> 0;

        // 4. Если len равен 0, вернём -1.
        if (len === 0) {
            return -1;
        }

        // 5. Если был передан аргумент fromIndex, положим n равным
        //    ToInteger(fromIndex); иначе положим n равным 0.
        var n = +fromIndex || 0;

        if (Math.abs(n) === Infinity) {
            n = 0;
        }

        // 6. Если n >= len, вернём -1.
        if (n >= len) {
            return -1;
        }

        // 7. Если n >= 0, положим k равным n.
        // 8. Иначе, n<0, положим k равным len - abs(n).
        //    Если k меньше нуля 0, положим k равным 0.
        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

        // 9. Пока k < len, будем повторять
        while (k < len) {
            // a. Положим Pk равным ToString(k).
            //   Это неявное преобразование для левостороннего операнда в операторе in
            // b. Положим kPresent равным результату вызова внутреннего метода
            //    HasProperty объекта O с аргументом Pk.
            //   Этот шаг может быть объединён с шагом c
            // c. Если kPresent равен true, выполним
            //    i.  Положим elementK равным результату вызова внутреннего метода Get
            //        объекта O с аргументом ToString(k).
            //   ii.  Положим same равным результату применения
            //        Алгоритма строгого сравнения на равенство между
            //        searchElement и elementK.
            //  iii.  Если same равен true, вернём k.
            if (k in O && O[k] === searchElement) {
                return k;
            }
            k++;
        }
        return -1;
    };
}

/*Задача 10 
Дан следующий массив: [1, 2, 3, 4, 5] 
Найдите позицию числа 3 в этом массиве.*/
let arr = [1, 2, 3, 4, 5];
let elem = arr.indexOf(3); //2 позиция в ззмассиве
console.log(elem); //2

/*Работа с includes Изучите теорию по следующим ссылкам: includes
Метод includes
Метод includes проверяет наличие элемента в массиве.
*********
Синтаксис
массив.includes(элемент)
*********
Пример 
Давайте проверим наличие элемента в массиве:*/
let arr = [1, 2, 3, 4, 5];
let result = arr.includes(3);
console.log(result); //true
/*Пример 
Пусть теперь проверяемого элемента нет в массиве:*/
let arr = [1, 2, 3, 4, 5];
let result = arr.includes(6);
console.log(result); //false

/*Задача 11 
Дан следующий массив: [1, 2, 3, 4, 5] проверьте, есть ли в этом массиве число 3.*/
let arr = [1, 2, 3, 4, 5];
let result = arr.includes(3)
console.log(result); //true