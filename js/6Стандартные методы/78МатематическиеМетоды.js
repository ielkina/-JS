"use strict";
/*Математические методы в JavaScript
Работа со степенью и корнем
Метод Math.pow
Метод Math.pow возводит число в заданную степень. Первым параметром передается число, 
вторым - в какую степень его возвести.
*********
Синтаксис
Math.pow(число, степень)
*********
Пример 
Давайте возведем число 3 в степень 4:*/
console.log(Math.pow(3, 4));//81
//Давайте возведем число 2 в степень -5:
console.log(Math.pow(2, -5));//0.03125
/*Метод Math.sqrt
Метод Math.sqrt возвращает квадратный корень числа.
*********
Синтаксис
Math.sqrt(положительное число)
*********
Пример 
Давайте выведем квадратный корень из 4:*/
console.log(Math.sqrt(4));//2
//Давайте выведем квадратный корень из 15:
console.log(Math.sqrt(15));//3.872983346207417
/*Давайте выведем квадратный корень из -100. Так как передано отрицательное число, 
то будет выведен NaN:*/
console.log(Math.sqrt(-100));//NaN

/*Задача 1
Возведите 2 в 10 степень.*/
console.log(Math.pow(2, 10));//1024

/*Задача 2
Найдите квадратный корень из 245.*/
console.log(Math.sqrt(245)); //15.652475842498529

/*Задача 3
Дан следующий массив:
[4, 2, 5, 19, 13, 0, 10]
Найдите квадратный корень из суммы кубов его элементов.Для решения воспользуйтесь 
циклом for.*/
let arr = [4, 2, 5, 19, 13, 0, 10];
let sum3 = 0;
for (let sum of arr) {
	sum3 += Math.pow(sum, 3);
}
console.log(Math.sqrt(sum3));//101.25709851659784

/*Работа с функциями округления

Метод Math.round
Метод Math.round выполняет округление до ближайшего целого числа по правилам 
математического округления.
*********
Синтаксис
Math.round(число)
*********
Пример 
Округлим до целых число 6.4:*/
console.log(Math.round(6.4));//6
//Округлим до целых число 6.6:
console.log(Math.round(6.6));//7
//Округлим до целых число 6.5:
console.log(Math.round(6.5));//7
//Округлим до целых число 6.49999:
console.log(Math.round(6.49999));//6

/*Метод Math.ceil
Метод Math.ceil производит округление дробного числа до целого всегда в большую 
сторону.
*********
Синтаксис
Math.ceil(число)
*********
Пример 
Округлим число 3.00001 в большую сторону:*/
console.log(Math.ceil(3.00001));//4

/*Метод Math.floor
Метод Math.floor производит округление числа до целых всегда в меньшую сторону.
**********
Синтаксис
Math.floor(число)
**********
Пример 
Округлим число 2.9999 в меньшую сторону:*/
console.log(Math.floor(2.9999));//2

/*Метод toFixed
Метод toFixed производит округление числа до указанного знака в дробной части.
Количество знаков указывается параметром.
Если число знаков не указано, то по умолчанию берется 0 знаков, то есть округление 
до целого числа.
*********
Синтаксис
число.toFixed([количество знаков в дробной части]);
*********
Пример 
Пусть дана дробь.Давайте округлим ее до 3 знаков в дробной части:*/
let num = 1.1111;
console.log(num.toFixed(3));//1.111
/*В следующем примере также оставлено только 3 знака в дробной части, однако 
последняя цифра увеличилась на 1, так как округление производится по правилам 
математики:*/
let num = 1.1119;
console.log(num.toFixed(3));//1.112
/*В следующем примере дробь округлится до целого числа, так как параметр 
метода пуст:*/
let num = 1.111;
console.log(num.toFixed());//1
/*В следующем примере параметр метода превышает количество знаков в дробной 
части исходной дроби, поэтому метод добавит две цифры 0 в конец нашей дроби:*/
let num = 1.1111;
console.log(num.toFixed(6));//1.111100

/*Метод toPrecision
Метод toPrecision округляет число до заданного знака.В отличие от Math.round 
округление можно проводить не только в дробной части.
Параметром метода указывается сколько цифр должно остаться в числе.Остальные 
цифры будут отброшены.Последнее оставшееся число будет округлено по правилам 
математического округления.
Если указанное количество знаков не достижимо обрезанием десятичной части - переводит
число в экспоненциальную форму.
Экспоненциальная форма - это числа вида 1.2e+3.Чтобы преобразовать в нормальную 
форму нужно сделать так: 1.2e+3 = 1.2 * 10 * 3 = 1.2 * 1000 = 1200.
Если параметр пуст, то будет возращено исходное число.
*********
Синтаксис
число.toPrecision(длина);
*********
Пример 
В данном примере число 678.19324 с помощью toPrecision приведется к 4 цифрам, 
причем, так как после 1 стоит цифра 9, то по правилам математики единица 
преобразуется к двойке:*/
let num = 678.19324;
console.log(num.toPrecision(4));//678.2
/*В данном примере число должно сократиться до двух знаков и будет отброшена 
не только дробная часть, но и целая.Поэтому число переведется в экспоненциальную 
форму:*/
let num = 678.19324;
console.log(num.toPrecision(2));//6.8e+2
/*В данном примере число 12 приводится к 3 цифрам.Так как число целое, то в дробной 
части появится 0:*/
let num = 12;
console.log(num.toPrecision(3));//12.0
//Давайте теперь приведем число 12 к четырем цифрам.В дробной части появятся два 0:
let num = 12;
console.log(num.toPrecision(4));//12.00
//Давайте теперь приведем число 12.1 к пяти цифрам:
let num = 12.1;
console.log(num.toPrecision(5)); //12.100

/*Задача 4
Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.*/
let num = 379;
num = Math.sqrt(num);//19.467922333931785
console.log(Math.floor(num));//19
console.log(num.toPrecision(4));//19.47
console.log(num.toFixed(3));//19.468

/*Задача 5
Найдите квадратный корень из 587. Округлите результат в большую и меньшую стороны, 
запишите результаты округления в объект с ключами 'floor' и 'ceil'.*/
let num = Math.sqrt(587);
console.log(num);//24.228082879171435
console.log(Math.floor(num));//24
console.log(Math.ceil(num));//25

// let num = 587;
// let obj = {};
// obj.floor = Math.floor(Math.sqrt(num));
// obj.ceil = Math.ceil(Math.sqrt(num));
// console.log(obj);

/*Нахождение максимального и минимального числа
Метод Math.max
Метод Math.max возвращает максимальное число из группы чисел, переданных в функцию.
Если в функцию ничего не передано, то будет возращено - Infinity.
По умолчанию функция не работает с массивами, однако с помощью хитрого приема можно 
найти максимальное значение массива: Math.max.apply(null, arr), где arr - произвольный 
массив.
*********
Синтаксис
Math.max(число, число, число...)
*********
Пример 
Давайте выведем максимальное число из группы чисел 1, 5, 10, 34, 100:*/
console.log(Math.max(1, 5, 10, 34, 100));//100
//Давайте выведем максимальное число из группы чисел - 1, 0, -20, -56, -100:
console.log(Math.max(-1, 0, -20, -56, -100));//0
//В следующем примере выведется - Infinity, так как методу не передали параметров:
console.log(Math.max());//-Infinity
//Давайте выведем максимальное значение массива:
let arr = [1, 5, 10, 34, 100];
let max = Math.max.apply(null, arr);
console.log(max);//100

/*Метод Math.min
Метод Math.min возвращает минимальное число из группы чисел, переданных параметрами.
Если параметрами ничего не передано, то будет возращено Infinity.
По умолчанию метод не работает с массивами, однако с помощью хитрого приема можно 
найти минимальное значение массива: Math.min.apply(null, arr), где arr - произвольный
массив.
*********
Синтаксис
Math.min(число, число, число...);
*********
Пример 
Давайте выведем минимальное число из группы чисел 40, 20, 42, 100, 67:*/
console.log(Math.min(40, 20, 42, 100, 67));//20
//Давайте выведем минимальное число из группы чисел - 1, -100, -30, -25, 40:
console.log(Math.min(-1, -100, -30, -25, 40));//-100
//В следующем примере выведется Infinity, так как методу не передали параметров:
console.log(Math.min());//Infinity
//Давайте выведем минимальное значение массива:
let arr = [40, 20, 42, 100, 67];
let min = Math.min.apply(null, arr);
console.log(min);//20

/*Задача 6
Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.*/
let arr = [4, -2, 5, 19, -130, 0, 10];
console.log(Math.min.apply(null, arr));//-130
console.log(Math.max.apply(null, arr));//19

/*Работа с рандомом
Метод Math.random возвращает случайное дробное число от 0 до 1.
*********
Синтаксис
Math.random()
*********
Применение
Чтобы получить случайное число в определенном промежутке(дробное или целое) 
следует пользоваться специальными приемами.
Получение случайного дробного числа между min и max:*/
function getRandomArbitary(min, max) {
	return Math.random() * (max - min) + min;
}
//Получение случайного целого числа между min и max:
function getRandomInt(min, max) {
	return Math.floor(Math.random() * (max - min + 1)) + min;
}
/*Пример 
Давайте выведем случайное число от 0 до 1:*/
console.log(Math.random());//0.5416665468657356
//Давайте выведем случайное целое число от 10 до 100:
function getRandomInt(min, max) {
	return Math.floor(Math.random() * (max - min + 1)) + min;
}
console.log(getRandomInt(10, 100));//12

/*Задача 7
Выведите на экран случайное целое число от 1 до 100.*/
function getRandomInt(min, max) {
	return Math.floor(Math.random() * (max - min + 1)) + min;
}
console.log(getRandomInt(1, 100));

/*Задача 8
С помощью цикла заполните массив 10 - ю случайными целыми числами.*/
let arr = [];
for (let i = 0; i < 10; i++) {
	arr.push(Math.floor(Math.random() * 10));
}
console.log(arr);

/*Работа с модулем
Метод Math.abs возвращает модуль числа, то есть из отрицательного числа 
делает положительное.
*********
Синтаксис
Math.abs(число)
*********
Пример 
Давайте выведем модуль числа - 3:*/
console.log(Math.abs(-3));//3
//Давайте выведем модуль числа 3:
console.log(Math.abs(3));//3

/*Задача 9
Даны переменные a и b.Найдите модуль разности a и b.Проверьте работу 
скрипта самостоятельно для различных a и b.*/
let a = 1,
	b = 2;
console.log(Math.abs(a - b));//1