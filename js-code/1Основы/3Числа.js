"use strict";
/*
Числа и операции над ними в JavaScript
 В JavaScript можно выполнять математические операции над числами. Смотрите 
 примеры:
     let a = 1 + 2; // выполняем сложение
     alert(a);      // выведет 3
     let b = 3 - 2; // выполняем вычитание
     alert(b);      // выведет 1
     let c = 3 * 2; // выполняем умножение
     alert(c);      // выведет 6
     let d = 4 / 2; // выполняем деление
     alert(d);      // выведет 2
 Задача 1
 Создайте переменную a. Запишите в нее сумму чисел 1, 2 и 3. С помощью функции 
 alert выведите на экран содержимое переменной a.*/
let a = 1 + 2 + 3;
console.log(a);
/*
Замечания
Чтобы вывести результат операции на экран, не обязательно вводить переменную. 
Можно просто выполнить нужные операции внутри функции alert:
    alert(2 + 3); // выведет 5
В операции не обязательно должно участвовать только два числа, их может быть 
любое количество. Сложим, например, три числа и сразу же выведем алертом 
результат:
    alert(2 + 3 + 4); // выведет 9
Задача 2
Выведите с помощью функции alert сумму чисел 1, 2 и 3.*/
console.log(1 + 2 + 3);
/*
Операции над переменными
 Математические операции можно производить не только над числами, но и над 
 переменными. Сложим, к примеру, значения двух переменных:
     let a = 1;
     let b = 2;
     alert(a + b); // выведет 3
 Не обязательно сразу выводить результат операции, можно вначале записать его в 
 какую нибудь переменную, а уже затем вывести значение этой переменной:
     let a = 1;
     let b = 2;
     let c = a + b; // запишем сумму в переменную c
     alert(c);      // выведет 3
 Задача 3
 Создайте переменную a со значением 10 и переменную b со значением 2. Выведите 
 на экран их сумму, разность, произведение и частное (результат деления).*/
let a3 = 10,
    b3 = 2,
    c3 = a3 + b3,
    d3 = a3 / b3,
    e3 = a3 - b3,
    f3 = a3 * b3;
console.log(c3); //12
console.log(d3); //5
console.log(e3); //8
console.log(f3); //20
console.log(c3, d3, e3, f3);
/*
 Задача 4
 Создайте переменную c со значением 10 и переменную d со значением 5. 
 Просуммируйте их, а результат присвойте переменной result. Выведите на 
 экран значение переменной result.*/
let c4 = 10,
    d4 = 5,
    result = c4 + d4;
console.log(result);
/*15 
Задача 5
Создайте переменную a со значением 1, переменную b со значением 2 и переменную 
c со значением 3. Выведите на экран их сумму.*/
let a5 = 1,
    b5 = 2,
    c5 = 3;
console.log(a5 + b5 + c5);
/*
Задача 6
Создайте переменную a со значением 10 и переменную b со значением 5. Отнимите
 от a переменную b и результат присвойте переменной c.
Затем создайте переменную d, присвойте ей значение 7. Сложите переменные c и d, 
а результат запишите в переменную result. Выведите на экран значение переменной 
result. */
let a6 = 10,
    b6 = 5,
    c6 = a6 - b6,
    d6 = 7,
    result6 = c6 + d6;
console.log(result6);
/* 12
Приоритет операций
 Математические операции JavaScript имеют такой же приоритет, как в обычной 
 математике.
 То есть в начале выполняется умножение и деление, а потом уже сложение и 
 вычитание. В следующем примере вначале 2 умножится на 2 и затем к результату
 прибавится 3:
     let a = 2 * 2 + 3;
     alert(a); // выведет 7 (результат 4 + 3)
 Задача 7
 Не запуская код, определите, что выведется на экран:
     let a = 5 + 5 * 3;
     alert(a); 
     Ответ : 20.
 Задача 8 
 Не запуская код, определите, что выведется на экран:
     let a = 5 + 5 * 3 + 3;
     alert(a);
     Ответ : 23.
 Задача 9 
 Не запуская код, определите, что выведется на экран:
     let a = 8 / 2 + 2;
     alert(a);
     Ответ : 6.
 Задача 10 
 Не запуская код, определите, что выведется на экран:
     let a = 8 + 2 / 2;
     alert(a);
     Ответ : 9.
Равный приоритет
 Умножение и деление имеют равный приоритет и выполняются по очереди слева 
 направо. Рассмотрим на примере, что имеется ввиду.В следующем коде вначале
  выполнится деление, а потом умножение:
     let a = 8 / 2 * 4;
     alert(a); // выведет 16 (результат 4 * 4)
 Если же переставить знаки местами, то вначале выполнится умножение, а потом
 деление:
     let a = 8 * 2 / 4;
     alert(a); // выведет 4 (результат 16 / 4)
 В следующем примере каждая новая операция деления будет применяться к
 предыдущей:
     let a = 16 / 2 / 2 / 2;
     alert(a); // выведет 2
 Задача 11 
 Не запуская код, определите, что выведется на экран:
     let a = 8 / 2 * 2;
     alert(a);
     Ответ : 8.
 Задача 12 
 Не запуская код, определите, что выведется на экран:
     let a = 8 * 4 / 2 / 2;
     alert(a);
     Ответ : 8.
Группирующие скобки
 При желании вы можете указывать приоритет операций с помощью круглых скобок. 
 Давайте,например, переделаем наш код так, чтобы вначале выполнилось сложение,
 а уже потом умножение:
     let a = 2 * (2 + 3);
     alert(a); // выведет 10 (результат 2 * 5)
 Примечание: скобок может быть любое количество, в том числе и вложенных друг в 
 друга:
     let a = 2 * (2 + 4 * (3 + 1));
     alert(a); //36
 В скобки можно заключить операции, обладающие приоритетом - это не будет 
 ошибкой. Например, заключим в скобки произведение чисел:
     let a = (2 * 2) + 3;
     alert(a); // выведет 7 (результат 4 + 3)
 В данном случае скобки получаются лишними(у умножения ведь и так приоритет),
 но код является допустимым.
 Иногда такую группировку используют в тех местах, где приоритет операций не 
 очевиден. Для примера рассмотрим следующий код:
     let a = 8 / 2 * 4;
     alert(a);
 Как вы уже знаете, в нем вначале выполнится деление, а потом умножение.Но с
 первого взгляда это может быть не слишком очевидно.
 Можно использовать группирующие скобки, чтобы явно показать приоритет:
     let a = (8 / 2) * 4;
     alert(a);
 Задача 13 
 Не запуская код, определите, что выведется на экран:
     let a = (2 + 3) * (2 + 3);
     alert(a);
     Ответ : 25
 Задача 14 
 Не запуская код, определите, что выведется на экран:
     let a = (2 + 3) * 2 + 3;
     alert(a);
     Ответ : 13.
 Задача 15 
 Не запуская код, определите, что выведется на экран: 
     let a = 2 * (2 + 4 * (3 + 1));
     console.log(a);
     Ответ : 36.
 Задача 16 
 Не запуская код, определите, что выведется на экран:
     let a = 2 * 8 / 4;
     alert(a);
     Ответ : 4
 Задача 17 
 Не запуская код, определите, что выведется на экран:
     let a = (2 * 8) / 4;
     alert(a);
     Ответ : 4
 Задача 18 
 Не запуская код, определите, что выведется на экран:
     let a = 2 * (8 / 4);
     alert(a);
     Ответ : 4.
Дроби
 Ранее мы с вами работали только с целыми числами.Но в JavaScript также
 существуют и десятичные дроби. При этом целая и дробная части отделяются
 друг от друга точкой.
 Смотрите пример:
     let a = 0.5;
     alert(a); // выведет 0.5
 Смотрите еще пример:
     let a = 0.5 + 0.5;
     alert(a); // выведет 1
 Задача 19 
 Запишите в переменную a число 1.5, а в переменную b - число 0.75.Найдите сумму
 значений этих переменных и выведите ее на экран.*/
let a19 = 1.5,
    b19 = 0.75;
console.log(a19 + b19); // 2.25
/*
Отрицательные числа
 Числа могут быть отрицательными.Для этого перед числом необходимо поставить 
 знак минус:
     let a = -1;
     alert(a); // выведет -1
 Знак минус можно писать как к числам, так и к переменным:
     let a = 1;
     let b = -a; // записали в b содержимое a с обратным знаком
     alert(b); // выведет -1
 Или вот так:
     let a = 1;
     alert(-a); // выведет -1
 Задача 20 
 Создайте переменную a со значением - 100. Выведите это значение на экран.*/
// let a20 = -100;
// console.log(a20);
let a20 = 100;
console.log(-a20);
/*
 Задача 21 
 Создайте переменную a, запишите в нее какое - нибудь положительное или 
 отрицательное число.Выведите на экран это число с обратным знаком.*/
let a21 = 1;
console.log(-a21);
/*
Плюс перед переменными
 Подобно тому, как перед отрицательными числами ставится знак "минус", перед
 положительными числами можно ставить знак "плюс".
 Фактически этот плюс ничего не делает, но вполне является допустимым, смотрите
 пример:
     let a = +1;
     alert(a); // выведет 1
Остаток от деления
 Существует специальный оператор % , с помощью которого можно найти остаток от
 деления одного числа на другое:
     alert(10 % 3); // выведет 1
 Если одно число делится нацело на второе - остаток будет равен нулю:
     alert(10 % 2); // выведет 0
 Оператор % , конечно же, можно применять не только к числам, но и к переменным:
     let a = 10;
     let b = 3;
     alert(a % b); // выведет 1
 Задача 22 
 Дана переменная a со значением 10 и переменная b со значением 3. Найдите
 остаток от деления a на b.*/
let a22 = 10,
    b22 = 3;
console.log(a22 % b22); //1
/*
Возведение в степень
 Для возведения числа в степень также существует специальный оператор **.
 Давайте с его помощью возведем число 10 в третью степень:
     alert(10 ** 3); // выведет 1000
 Давайте возведем в степень значение переменной:
     let a = 10;
     alert(a ** 3); // выведет 1000
 Может быть такое, что и число, и степень будут содержаться в переменных:
     let a = 10;
     let b = 3;
     alert(a ** b); // выведет 1000
 Задача 23 
 Возведите число 2 в 10 - ю степень.Выведите результат на экран.*/
let a23 = 2,
    b23 = 10;
console.log(a23 ** b23); //1024
/*
Приоритет возведения в степень
 Операция возведения в степень имеет приоритет перед умножением и делением.В
 следующем примере вначале выполнится возведение в степень, а затем умножение:
     alert(2 * 2 ** 3);
 Задача 24 
 Не запуская код, определите, что выведется на экран:
     let a = 3 * 2 ** 3;
     alert(a);
     Ответ : 24
 Задача 25 
 Не запуская код, определите, что выведется на экран:
     let a25 = (3 * 2) ** 3; //сперва в скобках потом степень
     console.log(a25);
     Ответ : 216
 Задача 26
 Не запуская код, определите, что выведется на экран:
     let a26 = 3 * 2 ** (3 + 1);
     console.log(a26);
     Ответ : 48
 Задача 27 
 Не запуская код, определите, что выведется на экран:
     let a = 2 ** 3 * 3;
     alert(a);
     Ответ : 24
 Задача 28 
 Не запуская код, определите, что выведется на экран:
     let a = 3 * 2 ** 3 * 3;
     alert(a); 
     Ответ : 72*/